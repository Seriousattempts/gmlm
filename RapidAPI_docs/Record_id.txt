# GET /v1/records/{record_id} - User Documentation

## **Purpose**
The `/v1/records/{record_id}` endpoint retrieves **a single specific record** by its unique ID. This is a direct lookup operation that returns one record or a 404 error if the record doesn't exist.

## **Prerequisites**
1. **Load your dataset** using `POST /v1/load/{file_name}` before using this endpoint.
2. **Immediately verify** the load using `GET /v1/schema` after using /v1/load (contains text_fields accessibility that's needed via _texted.txt)
3. Query a specific record using `GET /v1/records/{record_id}`

### **URL**
```
GET /v1/records/{record_id}
```

### **Path Parameters**
| Name | Type | Description | Required |
|------|------|-------------|----------|
| `record_id` | **STRING** | The unique ID of the record to retrieve | Yes |

### **Query Parameters**
**None** - This endpoint does not support query parameters like pagination, filtering, or field selection.

⚠️ **Note**: Unlike `/v1/records`, this endpoint does not support pagination, filtering, or field selection. It returns the complete record with all available text fields.

## **Dataset-Specific Text Fields**

**Different JSONL files have different available text fields**. Always check `/v1/schema` after loading to see what's available:

### **Full_Example_Data_text.jsonl**
```json
{
  "text_fields": [
    "Definition",
    "Examples", 
    "Examples Explanation",
    "Function",
    "Returns",
    "Syntax"
  ]
}
```

### **StructPointer_Data_text.jsonl**
```json
{
  "text_fields": [
    "Argument",
    "Description",
    "Syntax", 
    "Type"
  ]
}
```

## **Complete Workflow Example**

### **Step 1: Load Dataset**
```bash
POST /v1/load/Full_Example_Data_text.jsonl
```

**Response:**
```json
{
  "data": {
    "message": "Successfully loaded Full_Example_Data_text.jsonl",
    "text_fields": ["Definition", "Examples", "Examples Explanation", "Function", "Returns", "Syntax"],
    "records_count": 2100
  }
}
```

### **Step 2: Verify Dataset Loaded (Critical!)**
```bash
GET /v1/schema
```

**Confirm Response Shows:**
```json
{
  "data": {
    "current_file": "Full_Example_Data_text.jsonl",
    "total_records": 2100,
    "text_fields": ["Definition", "Examples", "Examples Explanation", "Function", "Returns", "Syntax"]
  }
}
```

### **Step 3: Query Specific Record by ID**
```bash
GET /v1/records/Physics
```

**Successful Response:**
```json
{
  "data": {
    "id": "Physics",
    "text": {
      "Definition": "this function can be used to set custom mass and rotational inertia values for a physics enabled instance. normally the mass, centre of mass, and rotational inertia for an instance are calculated using a combination the surface area of the bound fixtures and their density.",
      "Examples": "physics_mass_properties(70, -4, 0, 2.5);",
      "Examples Explanation": "This sets the mass to 70kg, shifts the center of mass 4 pixels left, and sets rotational inertia to 2.5.",
      "Function": "physics_mass_properties",
      "Returns": "N/A",
      "Syntax": "physics_mass_properties(mass, local_center_x, local_center_y, inertia);"
    },
    "sheet": "Physics",
    "metadata": {}
  },
  "meta": null,
  "errors": null
}
```

### **Record Not Found Response (404):**
```bash
GET /v1/records/NonExistentID
```

**Error Response:**
```json
{
  "detail": "Record not found: NonExistentID"
}
```

## **Response Structure**

### **Success Response**
- **`data`**: Single record object containing:
  - **`id`**: The record's unique identifier
  - **`sheet`**: Source sheet/category 
  - **`text`**: Object containing all available text fields for this dataset
  - **`metadata`**: Additional metadata fields (if any)
- **`meta`**: Always null for this endpoint
- **`errors`**: Always null on success

### **Key Differences from `/v1/records`**
- **No pagination** - Returns single record only
- **No query parameters** - Only path parameter `{record_id}`
- **No filtering** - Direct ID lookup only
- **All text fields included** - Cannot select specific fields
- **404 on not found** - Returns error instead of empty array
- **No meta information** - No pagination or search metadata

## **Use Cases**
- **Direct record access** when you know the exact record ID
- **Record detail pages** in applications
- **API integrations** requiring specific record data
- **Bookmarking** or linking to specific records
