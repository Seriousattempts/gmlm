{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_add_tags",
    "Definition": "this function adds one or more tag strings to any asset from the asset browser. you supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. if the function succeeds in adding the tag(s) it will return true otherwise it will return false.",
    "Syntax": "asset_add_tags(name_or_index, tags, [asset_type]);",
    "Returns": "boolean",
    "Examples": "var _a = array_create(3);\n_a[0] = \"enemy\";\n_a[1] = \"all_levels\";\n_a[2] = \"boss\";\nasset_add_tags(obj_enemy_boss_parent, _a, asset_object);",
    "Examples Explanation": "this code will create an array of tags and then add them to the given object."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 0,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 829,
    "word_count": 139,
    "processing_timestamp": "2025-08-05T17:30:33.591670"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_clear_tags",
    "Definition": "this function clears all tags present on the given asset from the asset browser and returns whether any tags were removed. if the function succeeds in clearing the tags it will return true otherwise it will return false. you supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.",
    "Syntax": "asset_clear_tags(name,[asset_type]);",
    "Returns": "boolean (whether any tags were removed)",
    "Examples": "asset_clear_tags(obj_enemy_parent, asset_object);",
    "Examples Explanation": "this code will clear all tags from the given object asset."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 1,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 699,
    "word_count": 111,
    "processing_timestamp": "2025-08-05T17:30:33.591838"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_get_ids",
    "Definition": "this function gets an array of references to assets of the given asset type. note the returned array contains assets that you added through the asset browser as well as assets that you added dynamically at runtime. note for the asset type asset_script the function returns both script assets (the ones you add to the asset browser) and the script functions they contain.",
    "Syntax": "asset_get_ids(asset_type);",
    "Returns": "array of asset",
    "Examples": "var _arr_ids = asset_get_ids(asset_sprite);",
    "Examples Explanation": "this code above gets all sprites in the game at the time the function is called and stores them in a temporary variable _arr_ids. sprites that you added before using the sprite_add_* functions are also included."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 2,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 677,
    "word_count": 108,
    "processing_timestamp": "2025-08-05T17:30:33.591974"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_get_index",
    "Definition": "this function gets the unique identifying index for a game asset from its name. if the asset is not found, the function will return a value of -1, otherwise it will return the unique index id for the asset being checked. this id can then be used in other functions as you would any other index value, like the sprite_index or the path_index, for example. make sure that the asset exists before using it to reduce errors that will crash your game.",
    "Syntax": "asset_get_index(name);",
    "Returns": "asset (any asset type)",
    "Examples": "var obj = asset_get_index(\"obj_enemy_\" + string(global.level));\nif (object_exists(obj))\n{\ninstance_create_layer(random(room_width), random(room_height), \"enemy_layer\", obj);\n}",
    "Examples Explanation": "this code will get an object asset from a string, and if that asset exists, create an instance of the object in the game."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 3,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 801,
    "word_count": 126,
    "processing_timestamp": "2025-08-05T17:30:33.592112"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_get_tags",
    "Definition": "this function retrieves all tags assigned to an asset from the asset browser. you supply either the asset name (as a string) or its asset index, and the function will return an array of tags for that asset. if no tags are found or there is an error (i.e.: the name string given doesn't exist) then the returned array will be empty. when supplying an asset index value, supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.",
    "Syntax": "asset_get_tags(name_or_index, [asset_type]);",
    "Returns": "array",
    "Examples": "my_tags = asset_get_tags(object_get_name(object_index));",
    "Examples Explanation": "this code will retrieve all the tags assigned to the object that the instance running the code has been created from."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 4,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 756,
    "word_count": 122,
    "processing_timestamp": "2025-08-05T17:30:33.592242"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_get_type",
    "Definition": "this function gets the type of asset being referenced from its name or handle. one of the constants listed below will be returned.",
    "Syntax": "asset_get_type(name_or_ref);",
    "Returns": "asset type constant",
    "Examples": "if asset_get_type(\"pth_path_\" + string(global.game)) == asset_unknown\n{\nshow_debug_message(\"path doesn't exist!!!\");\n}\nelse\n{\npath_index = asset_get_index(\"pth_path_\" + string(global.game));\n}",
    "Examples Explanation": "this code checks a dynamically created asset name to see if the asset is of the correct type. if it is not, then a debug message will be shown, otherwise the asset name is used to assign the asset to the instance."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 5,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 596,
    "word_count": 89,
    "processing_timestamp": "2025-08-05T17:30:33.592367"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_has_any_tag",
    "Definition": "this function checks if one or more tag strings is assigned to any asset from the asset browser. you supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. when you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. if the function succeeds and one or more of the tag(s) is present for the asset then it will return true otherwise it will return false. if you need to check for a precise match to any given tag or set of tags, then use the function asset_has_tags().",
    "Syntax": "asset_has_any_tag(name_or_index, tags, [asset_type]);",
    "Returns": "boolean",
    "Examples": "var _a = array_create(3);\n_a[0] = \"boss\";\n_a[1] = \"main_boss\";\n_a[2] = \"final_boss\";\nif asset_has_any_tag(object_index, _a, asset_object)\n{\ninstance_create_layer(0, 0, \"overlay\", obj_boss_text);\n}",
    "Examples Explanation": "this code will create an array of tags and then check to see if any of them are applied to the given object, and if they are it will create an instance of another object."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 6,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 1159,
    "word_count": 199,
    "processing_timestamp": "2025-08-05T17:30:33.592515"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_has_tags",
    "Definition": "this function checks if one or more tag strings is assigned to the given asset from the asset browser. you supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. if the function succeeds and all of the given tags are present for the asset then it will return true otherwise it will return false. if you need to check for any of a selection of tags rather than all tags, use the function asset_has_any_tag().",
    "Syntax": "asset_has_tags(name_or_index, tags, [asset_type]);",
    "Returns": "boolean",
    "Examples": "var _a = array_create(3);\n_a[0] = \"enemy\";\n_a[1] = \"level_\" + string(global.level);\n_a[2] = \"boss\";\nif asset_has_tags(object_index, _a, asset_object)\n{\ninstance_create_layer(0, 0, \"overlay\", obj_boss_text);\n}",
    "Examples Explanation": "this code will create an array of tags and then check to see if all of them are applied to the given object, and if they are it will create an instance of another object."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 7,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 1164,
    "word_count": 199,
    "processing_timestamp": "2025-08-05T17:30:33.592656"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "asset_remove_tags",
    "Definition": "this function removes one or more tag strings to any asset from the asset browser. you supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. if the function succeeds in removing the tag(s) it will return true otherwise it will return false.",
    "Syntax": "asset_remove_tags(name_or_index, tags, [asset_type]);",
    "Returns": "boolean (whether the tags could be removed)",
    "Examples": "var _a = array_create(3);\n_a[0] = \"enemy\";\n_a[1] = \"all_levels\";\n_a[2] = \"boss\";\nasset_remove_tags(obj_enemy_boss_parent, _a, asset_object);",
    "Examples Explanation": "this code will create an array of tags and then remove them from the given object."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 8,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 884,
    "word_count": 145,
    "processing_timestamp": "2025-08-05T17:30:33.592791"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "tag_get_asset_ids",
    "Definition": "this function gets all the assets of a given type that have the given tags assigned to them. you supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check. the function will return an array, where each item in the array will be a single asset index value. if there are no assets of the type that have the given tag(s), an empty array will be returned.",
    "Syntax": "tag_get_asset_ids(tags, asset_type);",
    "Returns": "array",
    "Examples": "var _paths = tag_get_asset_ids(\"enemy\", asset_path);\nvar _num = irandom(array_length(_paths) - 1);\npath_start(_paths[_num], 1, path_action_reverse, false);",
    "Examples Explanation": "this code uses the tag \"enemy\" to find all the path assets with that tag, before choosing one at random and assigning it to the instance running the code."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 9,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 805,
    "word_count": 137,
    "processing_timestamp": "2025-08-05T17:30:33.592919"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Assets_And_Tags",
  "text": {
    "Function": "tag_get_assets",
    "Definition": "his function retrieves the names of all assets that have been assigned the given tag or tags. you supply either a single tag string or an array, where each item in the array is a tag string. the function will return an array where each entry is the name (as a string) of the asset with the given tag. if you need the unique index for the asset, then you can use the function asset_get_index() along with the returned name. if there are no assets with the given tag(s), or if there is an error (e.g.: the given tags don't exist), then an empty array will be returned.",
    "Syntax": "tag_get_assets(tags);",
    "Returns": "array",
    "Examples": "backgrounds = ds_list_create();\nvar _assets = tag_get_assets(\"background\");\nfor (var i = 0; i< array_length(_assets); ++i;)\n{\nif asset_get_type(_assets[i]) == asset_sprite\n{\nds_list_add(backgrounds, asset_get_index(_assets[i]));\n}\n}",
    "Examples Explanation": "this code creates a list, then retrieves the names of all the assets with the tag \"background\". it loops through the array of names returned, checking to see if any of them are sprite assets, and if they are then the unique index value for the asset is added to the list for future use."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Assets_And_Tags",
    "row_index": 10,
    "total_labeled_columns": 6,
    "non_empty_columns": 6,
    "columns_used": [
      "function",
      "definition",
      "syntax",
      "returns",
      "examples",
      "examples explanation"
    ],
    "text_length": 1124,
    "word_count": 191,
    "processing_timestamp": "2025-08-05T17:30:33.593060"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Struct Pointer",
  "text": {
    "Argument": "asset_type",
    "Syntax": "asset_get_ids(asset_type);",
    "Type": "asset type constant",
    "Description": "the type of asset to return in the array"
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Struct Pointer",
    "row_index": 0,
    "total_labeled_columns": 4,
    "non_empty_columns": 4,
    "columns_used": [
      "argument",
      "syntax",
      "type",
      "description"
    ],
    "text_length": 95,
    "word_count": 14,
    "processing_timestamp": "2025-08-05T17:30:33.609866"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Struct Pointer",
  "text": {
    "Argument": "name",
    "Syntax": "asset_get_index(name);",
    "Type": "string",
    "Description": "the name of the game asset to get the index of (a string)."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Struct Pointer",
    "row_index": 1,
    "total_labeled_columns": 4,
    "non_empty_columns": 4,
    "columns_used": [
      "argument",
      "syntax",
      "type",
      "description"
    ],
    "text_length": 90,
    "word_count": 16,
    "processing_timestamp": "2025-08-05T17:30:33.610039"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Struct Pointer",
  "text": {
    "Argument": "name_or_ref",
    "Syntax": "asset_get_type(name_or_ref);",
    "Type": "asset",
    "Description": "the name of or a reference to the game asset to get the type of."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Struct Pointer",
    "row_index": 2,
    "total_labeled_columns": 4,
    "non_empty_columns": 4,
    "columns_used": [
      "argument",
      "syntax",
      "type",
      "description"
    ],
    "text_length": 108,
    "word_count": 18,
    "processing_timestamp": "2025-08-05T17:30:33.610154"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Struct Pointer",
  "text": {
    "Argument": "tags",
    "Syntax": "tag_get_assets(tags);",
    "Type": "string",
    "Description": "a single asset tag string or an array with various asset tags."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Struct Pointer",
    "row_index": 3,
    "total_labeled_columns": 4,
    "non_empty_columns": 4,
    "columns_used": [
      "argument",
      "syntax",
      "type",
      "description"
    ],
    "text_length": 93,
    "word_count": 15,
    "processing_timestamp": "2025-08-05T17:30:33.610258"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_object",
    "Description": "the given name refers to an object."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 0,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 47,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.642245"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_sprite",
    "Description": "the given name refers to a sprite."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 1,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 46,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.642707"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_sound",
    "Description": "the given name refers to a sound."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 2,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 44,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.643647"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_room",
    "Description": "the given name refers to a room."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 3,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 42,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.644807"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_tiles",
    "Description": "the given name refers to a tile set."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 4,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 47,
    "word_count": 9,
    "processing_timestamp": "2025-08-05T17:30:33.644983"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_path",
    "Description": "the given name refers to a path."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 5,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 42,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.645099"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_script",
    "Description": "the given name refers to a script."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 6,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 46,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.645193"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_font",
    "Description": "the given name refers to a font."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 7,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 42,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.645283"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_timeline",
    "Description": "the given name refers to a time line."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 8,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 51,
    "word_count": 9,
    "processing_timestamp": "2025-08-05T17:30:33.645946"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_shader",
    "Description": "the given name refers to a shader."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 9,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 46,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.646204"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_animationcurve",
    "Description": "the given name refers to an animation curve."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 10,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 64,
    "word_count": 9,
    "processing_timestamp": "2025-08-05T17:30:33.646357"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_sequence",
    "Description": "the given name refers to a sequence."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 11,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 50,
    "word_count": 8,
    "processing_timestamp": "2025-08-05T17:30:33.646508"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_particlesystem",
    "Description": "the given name refers to a particle system."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 12,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 63,
    "word_count": 9,
    "processing_timestamp": "2025-08-05T17:30:33.646629"
  }
}
{
  "id": "Asset_and_Tag",
  "sheet": "Type Constant",
  "text": {
    "Constant": "asset_unknown",
    "Description": "the given name refers to an asset that either does not exist, or is not one of the above listed."
  },
  "metadata": {
    "file_name": "Asset_and_Tag_references.xlsx",
    "sheet_name": "Type Constant",
    "row_index": 13,
    "total_labeled_columns": 2,
    "non_empty_columns": 2,
    "columns_used": [
      "constant",
      "description"
    ],
    "text_length": 109,
    "word_count": 21,
    "processing_timestamp": "2025-08-05T17:30:33.647135"
  }
}
