{"id":"Language_Features","sheet":"Language Features","text":{"Term":"begin / end","Definition":"the gamemaker language permits you to use the keywords begin and end instead of the more usual curly brackets {} when creating code blocks","First Code Example":"if (!visible)\nbegin\nexit;\nend\nwhile (place_meeting(x, y))\nbegin\nx -= lengthdir_x(1, direction - 180);\ny -= lengthdir_y(1, direction - 180);\nend","Explaining First Code Example":"note that using these keywords is not typical and is provided as part of the language more for legacy support than for anything else, and at any time in the future they may be deprecated."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"break","Definition":"the break statement is used to end prematurely a for, repeat, while or do / until loop of some kind, or to tell a switch statement to end at that point, or to prematurely end a with call. note that if break is used outside of any of these contexts it will give an error. its syntax is simply: break;","First Code Example":"// break in a for loop:\nfor (var i = 0; i < 10; i += 1)\n{\nif (array[i] == 234)\n{\nbreak;\n}\n}\nnum = i;\n// break in a repeat loop:\nvar i = 0;\nvar temp = 0;\nrepeat (10)\n{\ntemp += array[i];\nif (temp > max_total)\n{\nbreak;\n}\nelse\n{\ni += 1;\n}\n}\n// break in a while loop:\nvar i = 0;\nwhile (!place_free(x, y))\n{\nx = random(room_width);\ny = random(room_height);\nif (i > 50)\n{\nbreak;\n}\nelse\n{\ni+=1;\n}\n}\n// break in a do / until loop:\nvar _id = noone;\ndo\n{\n_id = list[| 0];\nif (instance_exists(_id))\n{\nbreak;\n}\nds_list_delete(list, 0);\n}\nuntil (ds_list_empty(list));\ntarget = _id;\n// break when using with:\nvar count = 0;\nwith (obj_enemy)\n{\ncount++;\nif (count > 10)\n{\nbreak;\n}\nhp = 100;\n}\nbreak in a switch:\nswitch (keyboard_key)\n{\ncase vk_left:\ncase ord(\"a\"):\nx -= 4;\nbreak;\ncase vk_right:\ncase ord(\"d\"):\nx += 4;\nbreak;\ncase vk_up:\ncase ord(\"w\"):\ny -= 4;\nbreak;\ncase vk_down:\ncase ord(\"s\"):\ny += 4;\nbreak;\n}","Explaining First Code Example":"the example shows code of various break statements, with a comment showing the type of loop being used for each break."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"continue","Definition":"the continue statement has the following basic syntax: continue; if used inside of a statement that forms a loop (for, repeat, while or do / until), it will immediately end the current iteration and jump back to the beginning of the loop starting a new iteration and omitting any code that comes after the continue within the loop. it can also be used within the with statement, where it will cause the code to skip to the next instance and run again. note that if continue is used outside of any of these contexts it will give an error.","First Code Example":"// below is an example of use in a for loop:\nvar _val = 0;\nfor (var i = 0; i < 10; i += 1)\n{\nif (val_array[i] <= 0)\n{\ncontinue;\n}\n_val += val_array[i];\n}\ndraw_text(32, 32, \"positive values total = \" + string(_val));\n// below is an example of use in a while loop:\nvar file = file_text_open_read(\"game_data.txt\");\nvar _num = 0;\nwhile (!file_text_eof(file))\n{\nvar _s = file_text_readln(file);\nif (_s == \"\")\n{\ncontinue;\n}\nstr[num++] = _s;\n}\nfile_text_close(file);\n// below is an example of use in a do / until loop:\ndo\n{\nvar _x = random(room_width);\nvar _y = random(room_height);\nif (instance_position(_x, y, obj_enemy)\n{\ncontinue;\n}\ninstance_create_layer(_x, _y, \"instances\", obj_enemy);\n}\nuntil (instance_count(obj_enemy) >= 10);\n// below you can find an example of use in a repeat loop:\nrepeat(10)\n{\nvar _x = random(room_width);\nvar _y = random(room_height);\nif (instance_position(_x, y, obj_enemy)\n{\ncontinue;\n}\ninstance_create_layer(_x, _y, \"instances\", obj_enemy);\n}\n// finally, an example of use in a with statement:\nwith (obj_enemy_parent)\n{\nif (object_index == obj_enemy_indestructible)\n{\ncontinue;\n}\nhp -= 100;\nif (hp <= 0)\n{\ninstance_destroy();\n}\n}","Explaining First Code Example":"the example shows code of various continue statements, with a comment showing the type of loop is being used for each continue."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"delete","Definition":"the delete operator is used to de-reference a struct, and has the following syntax: delete <variable>; what this means is that you call the delete operator along with the variable that holds a struct and it will remove the specific reference to the struct stored in the given variable (a reference is simply a value that points to the memory area that is storing the struct and its contents). if this reference was the last reference to the struct in your game, then the garbage collector will remove the struct from memory in a following iteration, typically at the very start of the next step. note delete can only be used along with variables, and not expressions. you will then use the garbage collecter operator to flag them explicitly so that the garbage collector removes them from memory at the very start of the following step, freeing the memory quickly and more efficiently.","First Code Example":"mystruct =\n{\na : 0,\nb : 100,\nc : \"hello world\"\n}","Explaining First Code Example":"shows a struct being created in the create event of an instance. this struct will then be used in the instance events as usual, before finally being flagged for garbage collection in the clean up event, like this:\ndelete mystruct;"}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"do / until","Definition":"a do statement is another way of iterating over one or more statements multiple times, and is really a \"do... until\" statement as you cannot have one without the other since you are telling gamemaker to do something until a specific expression returns true.","First Code Example":"do\n{\n<statement>;\n<statement>;\n...\n}\nuntil (<expression>);","Explaining First Code Example":"he statement (which can be a code block of multiple statements within curly brackets {}) is executed until the expression is found to be true, and the initial statement is always executed at least once.","Second Code Example (if Any)":"do\n{\nx = random(room_width);\ny = random(room_height);\n}\nuntil (place_free(x, y));","Explaining Second Code Example (if Any)":"an example of a typical way to use do... until. the code tries to place the current object at a free position and will set the x and y variables at least once, and then perform as many iterations as required until the place_free() expression returns true.\nwhen should you use a do / until loop? it should be used any time you want to repeat one or more statements, but don't actually know how many times it has to repeat, and want to ensure that the statements are run at least once before the loop ends.","Third Code Example (if Any)":"var _id = noone;\ndo\n{\n_id = list[| 0];\nif (instance_exists(_id))\n{\nbreak;\n}\nds_list_delete(list, 0);\n}\nuntil (ds_list_empty(list));\ntarget = _id;","Explaining Third Code Example (if Any)":"you can also use the break and continue statements within your do loops. using break will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished. we create a local variable and set it to hold the keyword noone. we then perform a do / until loop checking the first position of a ds list to see if it holds a valid instance id, and if it does then we break the loop, otherwise the value for the list position is deleted. after the loop is terminated (either by the break or because the list is empty) the local variable value is then assigned to the instance variable target.","Fourth Code Example (if Any)":"do\n{\nvar _x = random(room_width);\nvar _y = random(room_height);\nif (instance_position(_x, y, obj_enemy)\n{\ncontinue;\n}\ninstance_create_layer(_x, _y, \"instances\", obj_enemy);\n}\nuntil (instance_number(obj_enemy) >= 10);","Explaining Fourth Code Example (if Any)":"an example of using continue in a do / until loop. this code will generate a random room position then check if an instance of the object obj_enemy exists at that position. if it does, the current loop iteration is terminated using continue and a new iteration is started, and if it doesn't then an instance of the object obj_enemy is created at the random position. the loop will only terminate when there are 10 or more instances of the object in the room.\none final note: be careful with your do loops, as you can easily make them loop forever, in which case your game will hang and not react to any user input anymore and they will have to force close it."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"exit","Definition":"the exit statement has the following syntax: exit; exit simply ends the execution of the current script function, method, or event. note there is a slight difference in use here depending on the scope: if you use exit in a script function or method it will simply exit the function and return to the code that called the function. if you use exit in a code block within an object's event, it will exit the entire event even if there are various separate code blocks after exit has been called. if you use exit in a parent event and call that event using event_inherited() in a child object, only the parent event will exit and the child's event (which called event_inherited()) will continue.","First Code Example":"if (!visible)\n{\nexit;\n}\nother.hp -= attack;\nother.coins -= 4;\ncoins += 4;","Explaining First Code Example":"when used in an event, exit is typically used to avoid an instance running any further code when a specific condition has been met (or not). the code outlines an example of how it could be used, in this case within a collision event, although it can be used in any event. the code checks if the current instance is not visible, in that case it exits the code block, otherwise it goes ahead and runs the rest of the code.\nnote it does not end the execution of the game. for that you need to use the function game_end()."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"for","Definition":"one of the most used ways to iterate over a statement (or statements) multiple times is to use a for loop.","First Code Example":"for (<assignment>; <expression>; <operation>;)\n{\n<statement>;\n<statement>;\n...\n}","Explaining First Code Example":"this works as follows - first the assignment is executed which assigns a value to a variable, then the expression is evaluated and, if it is true, the statements in the curly brackets { } are executed. next the operation is performed on the assigned variable and then the expression is evaluated again. this loop will continue until the expression is found to be false.\nnow, this may sound complicated when written like that, but you should interpret it as:\n1. the first assignment initialises the for-loop\n2. the expression tests whether the loop should be ended\n3. the statement is performed\n4. the operation is performed\ngo back to step 2 and perform the expression again and continue or exit the loop\nnote you can use a var statement in the assignment part to initialise multiple variables.","Second Code Example (if Any)":"for (var i = 0; i < 10; i += 1)\n{\ndraw_text(32, 32 + (i * 32), string(i) + \". \"+ string(scr[i]));\n}","Explaining Second Code Example (if Any)":"the code initialises a for loop, starting at 0 and counting up to (and including) 9, and then uses the loop value of i to draw the values stored in an array down the screen. note how the for loop variable i is used to not only loop through the array, but to draw a number as well as tell gamemaker where to draw the values to in the room. this flexibility is one of the main reasons why for loops are so important in programming.\nwhen should you use a for loop? anytime you need to perform a fixed number of iterations over one or more statements while keeping track of the iteration that is currently being run and using that iteration value.\nnote you will see multiple examples when working with other people of the variables i and j being used for the loop counter variable. these are not obligatory variable names and you can use anything like a or foo or whatever. the use of i and j is simply a standard convention in programming.","Third Code Example (if Any)":"var _inst = noone;\nfor (var i = 0; i < 10; i += 1)\n{\n_inst = instance_find(obj_enemy_parent, i);\nif (instance_exists(_inst))\n{\nif (_inst.object_index == obj_enemy_melee)\n{\nbreak;\n}\n}\n}\ntarget = _inst;","Explaining Third Code Example (if Any)":"you can use the special break and continue statements within a for loop too. using break will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished. the code loops through the 10 nearest instances of the given \"parent\" object, and if an instance is found it checks the instance object id, and if it is an instance of obj_enemy_melee then the loop is ended using break and the id value assigned to a variable (if no instance is found, then the keyword noone will be added to the variable).","Fourth Code Example (if Any)":"var _val = 0;\nfor (var i = 0; i < 10; i += 1)\n{\nif (val_array[i] <= 0)\n{\ncontinue;\n}\n_val += val_array[i];\n}\ndraw_text(32, 32, \"positive values total = \" + string(_val));","Explaining Fourth Code Example (if Any)":"an example of using continue in a for loop. this code will check the value stored in each array position of a 10 length 1d array, and if any are less than or equal to 0 it will continue the loop, meaning that the current iteration will end, i will be incremented, and the next loop iteration will be started. if the value is greater than 0, then it is added to the local variable _val, and after the loop is finished the total value is drawn to the screen."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"if / else and conditional operators","Definition":"the ability to ask a simple question that gives a boolean true or false answer by using the if keyword.","First Code Example":"if (<expression>)\n{\n<statement>;\n<statement>;\n...\n}","Explaining First Code Example":"a simple if condition takes an expression and will perform one or more statements if the expression resolves as true.","Second Code Example (if Any)":"if (<expression>) then\n{\n<statement>;\n<statement>;\n...\n}","Explaining Second Code Example (if Any)":"this is saying that if an expression resolves to true then do something. note that the \"then\" part of the condition is implicit, but there is a then keyword that can be used (although it's almost always omitted).","Third Code Example (if Any)":"if (<expression>)\n{\n<statement>;\n}\nelse\n{\n<statement>;\n}","Explaining Third Code Example (if Any)":"the \"if... then... else...\" form by using the else keyword to do something else if the expression being checked evaluates as false. in this case the expression will be evaluated, and if it evaluates to false, the statement after else is executed, otherwise the initial statement is executed (it's true).\nnote in the gamemaker language any value that is less than or equal to 0 will evaluate as false, while any value that is greater than 0 will evaluate as true."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"grouping expressions & statements","Definition":"always put parentheses () around the expressions and curly brackets {} around the statements in the if (otherwise only the first statement will be executed), and take a new line in the block for each statement.","First Code Example":"if (<expression>)\n{\n<statement>\n}\nelse\n{\n<statement>\n}\n// example\nif (test == true)\n{\nvariable = false;\n}\nelse\n{\nvariable = true;\n}","Explaining First Code Example":"it means that there is no ambiguity in the code and that it will compile correctly on all platforms at all times. note when comparing two values to see if they are equal, you should use the \"==\" operator, and only use the \"=\" one for assignment. currently gamemaker will treat them as interchangeable, but this may change in the future and your code is cleaner and more obvious when using the correct operators for comparisons and assignments.","Second Code Example (if Any)":"if (x < 200)\n{\nx += 4;\n}\nelse\n{\nx = 200;\n}","Explaining Second Code Example (if Any)":"a proper example of using if"}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"compound checks","Definition":"checks various values or expressions in the same statement. these checks can use the various combining operators (&& and, || or, and ^^ xor). when you do this, gamemaker will evaluate each of them one at a time, and depending on how they evaluate, then the rest may be skipped.","First Code Example":"if (keyboard_check_pressed(vk_enter)) && (instance_exists(obj_player))\n{\ngo = false;\nalarm[0] = game_get_speed(gamespeed_fps);\n}","Explaining First Code Example":"this is checking using the && \"and\" operator, so it's checking if both of the conditions in the if evaluate to true, and if the first one is false then the second one won't even be checked.\nthis is called \"short circuiting\" the code, so when combining expressions to check, you should ensure that the \"cheapest\" one for performance is always the first to avoid evaluating the more expensive ones if the first evaluates to false.","Second Code Example (if Any)":"if (debug_on == true)\n{\nshow_debug_message(\"instances = \" + string(instance_count));\n}","Explaining Second Code Example (if Any)":"similar to short circuiting the code, if a condition will can be evaluated as true or false at compile time, then the entire condition will be removed from the code, for example, say you have a macro debug_on for debugging and it can be either true or false - when it is set to false then the following code block will be stripped from the game when it is compiled."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"ternary operators","Definition":"performing a basic if.","First Code Example":"variable = <condition> ? <statement1 (if true)> : <statement2 (if false)>","Explaining First Code Example":"the conditional operator \"?\" will return one of two given values depending on whether the condition expression evaluates to true or false.","Second Code Example (if Any)":"var temp_x = (x < (room_width / 2)) ? 32 : (room_width - 32);\n// or\ndraw_text(x, y, \"the fee is \" + (global.member ? \"$2.00\" : \"$10.00\"));\npath_start(((global.level > 10) ? path_hard : path_easy;), 2, path_action_reverse, true);","Explaining Second Code Example (if Any)":"the code will check the value of \"x\" against the value of half the room width and then if it is less it will set \"temp_x\" to 32 otherwise \"temp_x\" will be room width - 32.","Third Code Example (if Any)":"var c = a ? \"foo\" : (b ? \"bar\" : \"whee\"); // correct\nvar c = a ? \"foo\" : b ? \"bar\" : \"whee\"; // will cause an error","Explaining Third Code Example (if Any)":"nested conditional operations, with each operation enclosed in brackets. the conditional operations must be part of an expression and cannot go on the left-hand side of an assignment."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"new","Definition":"the new operator can be used to create a struct with a function which is called with the given arguments. the function can then populate the struct with variables from the arguments - much like the create event of an instance will set the initial variables for the instance - and then the new operator will return the struct. before using this operator it is important to note that the function given must be flagged as a constructor function otherwise the new operator will not create the struct. note you can check a struct to find out which function was used to create it using the runtime function instanceof().","First Code Example":"<variable> = new <function> (<argument>, <argument>, ...);","Explaining First Code Example":"when you use the new operator along with a function, it will return a struct reference which is stored in the given variable, permitting you to access the struct and any variables that were created within it by the function.","Second Code Example (if Any)":"function init_struct(_a, _b, _c) constructor\n{\na = _a;\nb = _b;\nc = _c;\n}","Explaining Second Code Example (if Any)":"a function that has been defined to use as a constructor.","Third Code Example (if Any)":"mystruct = new init_struct(10, 100, \"hello world\");","Explaining Third Code Example (if Any)":"a struct that populate a function with the variables set to the new values of the arguments used in the function. it is important to note that calling new on any function that has not been flagged as a constructor will cause a runtime exception."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"repeat","Definition":"have a statement or statements iterate over itself a certain number of times.","First Code Example":"repeat (<expression>)\n{\n<statement>;\n<statement>;\n...\n}","Explaining First Code Example":"with repeat the given statement is repeated the number of times indicated by the rounded value of the expression.","Second Code Example (if Any)":"repeat (5)\n{\ninstance_create_layer(random(400), random(400), \"instances\", obj_ball);\n}","Explaining Second Code Example (if Any)":"creates five balls at random positions","Third Code Example (if Any)":"var _x = 32;\nrepeat (global.p_lives)\n{\ndraw_sprite(spr_heart, 0, _x, 32);\n_x += sprite_get_width(spr_heart);\n}","Explaining Third Code Example (if Any)":"repeat multiple statements by enclosing them within curly brackets {} for however many iterations the \"lives\" global variable has, and each iteration draws the heart sprite at the _x position, then moves the position along a bit based on the heart sprite width. use to repeat over one or more statements a fixed number of times without any specific need to maintain a count of the iterations.","Fourth Code Example (if Any)":"var i = 0;\nvar temp = 0;\nrepeat (10)\n{\ntemp += array[i];\nif (temp > max_total)\n{\nbreak;\n}\nelse\n{\ni += 1;\n}\n}","Explaining Fourth Code Example (if Any)":"the code loops through 10 array values and adds them to a local variable. if the total of the local variable is greater than the given value for max_total, then the loop is terminated using break, otherwise the loop will continue.","Fifth Code Example (if Any)":"repeat(10)\n{\nvar _x = random(room_width);\nvar _y = random(room_height);\nif (instance_position(_x, y, obj_enemy)\n{\ncontinue;\n}\ninstance_create_layer(_x, _y, \"instances\", obj_enemy);\n}","Explaining Fifth Code Example (if Any)":"using continue in a repeat loop, the code will repeat 10 times, generating a random room position then checking if an instance of the object obj_enemy exists at that position. if it does, the current loop iteration is terminated using continue and a new iteration is started, and if it doesn't then an instance of the object obj_enemy is created at the random position."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"return","Definition":"only use the return statement in script functions and methods, and it is used to return a value from the function to be used in further code or function calls.","First Code Example":"return (<expression>)","Explaining First Code Example":"the execution of the function ends at the return statement, meaning that any code which comes after return has been called will not be run.","Second Code Example (if Any)":"/// @function sqr_calc(val);\n/// @param {real} val the value to calculate the square of\n/// @description calculate the square of the given value\nfunction sqr_calc(value)\n{\nif (!is_real(value))\n{\nreturn 0;\n}\nelse\n{\nreturn (value * value);\n}\n}","Explaining Second Code Example (if Any)":"example script function called sqr_calc which calculates the square of whatever value is passed to it, and it includes error catching in case the parameter that it is passed is not a real number","Third Code Example (if Any)":"if (keyboard_check_pressed(vk_enter))\n{\nval = scr_sqr(amount);\n}","Explaining Third Code Example (if Any)":"this writes the function name with the parameter values in parentheses. the variable val will either be 0 (because the variable amount is not a real number) or the total for value * value."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"switch","Definition":"to let your instances perform different actions depending on a particular value and not use consecutive if / else statements.","First Code Example":"switch (<expression>)\n{\ncase <constant1>:\n<code>\nbreak;\ncase <constant2>:\n<code>\nbreak;\n// more cases (with breaks)\ndefault:\n<code>;\n}","Explaining First Code Example":"first the expression is executed.\n- next, its result is compared with the different constants after each of the case statements. when we say \"constant\" what we mean is that the value in the case cannot be a variable expression and must be a fixed value of any data type, like \"fight\" or 3 or the keyword noone.\n- the execution begins from the first case statement with the matching value, until a break statement is encountered.\n- if no case statement has the matching value, then the default statement will be executed. it is not required to have a default statement, and if none is supplied then no action will be taken when there are no matching cases. the default statement can be placed anywhere in a switch block, however it's traditionally placed at the bottom, after all the cases.\n- note the switch statement will continue to execute code within a case, until a break is encountered. if you do not use breaks at the end of your cases, it will cause the switch to \"leak\" to the next case, and even to a default section, if there are no breaks in the way. this can cause unintended behaviour as the execution of one case can result in multiple cases being executed, so ensure to use break where appropriate.","Second Code Example (if Any)":"switch (player_lives)\n{\ncase 3:\ndraw_sprite(20, 20, spr_face_healthy);\nbreak;\ncase 2:\ndraw_sprite(20, 20, spr_face_hurt);\nbreak;\ncase 1:\ndraw_sprite(20, 20, spr_face_fatal);\nbreak;\ndefault:\ndraw_sprite(20, 20, spr_face_fainted);\nbreak;\n}","Explaining Second Code Example (if Any)":"multiple case statements can be used to execute the same statement, as the break is not always required for each and every case.","Third Code Example (if Any)":"switch (keyboard_key)\n{\ncase vk_left:\ncase ord(\"a\"):\nx -= 4;\nbreak;\ncase vk_right:\ncase ord(\"d\"):\nx += 4;\nbreak;\ncase vk_up:\ncase ord(\"w\"):\ny -= 4;\nbreak;\ncase vk_down:\ncase ord(\"s\"):\ny += 4;\nbreak;\n}","Explaining Third Code Example (if Any)":"since there is no break statement for a particular case, the execution simply continues with the code for the next case. the code uses switch to check for a keyboard event and then compares that to each case listed. if it meets any of the required values then the corresponding code is executed. note how the switch can check multiple cases and execute code until the next break, to permit various keys to be used to get the same result.\neach case can have its own code, so you can set up a sort of \"inheritance\" system where a case executes its own code and then the code for the next case as well."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"throw","Definition":"the throw runtime statement permits you to generate your own runtime exceptions, ending the game and showing an error message. the expression used can be a value or a string or any other data type, and this will then generate an exception error which is - by default - shown on the screen and on closing the error message the game will end. you can, however, take over this error message and use your own handler code by calling the function exception_unhandled_handler(). this runtime function permits you to supply a custom method to use that will be called whenever any unhandled exceptions occur in your game.","First Code Example":"throw (<expression>);"}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"try","Definition":"can be used in your game for error checking and permit you to test out blocks of code and control what happens if any runtime exceptions occur.","First Code Example":"try\n{\n<statement1>;\n<statement2>;\n...\n}","Explaining First Code Example":"will prevent the exception ending the game and showing the standard error message to the user, but this means that you will have to handle what happens next in that case, like saving out log files. you can use try with the finally statement, the catch statement and with the catch and finally statement together."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"catch","Definition":"can be used in your game for error checking and permit you to test out blocks of code and control what happens if any runtime exceptions occur.","First Code Example":"try\n{\n<statement1>;\n<statement2>;\n...\n}\ncatch(<variable>)\n{\n<statement1>;\n<statement2>;\n...\n}","Explaining First Code Example":"what catch does is permit you to run extra code supplied in the following block when an exception from the previous try has been caught.","Second Code Example (if Any)":"{\nmessage : \"\", // a string that is a short message for this exception\nlongmessage : \"\", // a string that is a longer message for this exception\nscript : \"\", // a string that describes where the exception came from\nstacktrace : [ \"\", \"\" ], // an array of strings that is the stack frame the exception was generated\n}","Explaining Second Code Example (if Any)":"if this is a runtime exception, then the supplied variable can be used to access a struct that will provide information","Third Code Example (if Any)":"var a = 0, b = 0, c = 0;\ntry\n{\nc = a div b;\n}\ncatch( _exception)\n{\nshow_debug_message(_exception.message);\nshow_debug_message(_exception.longmessage);\nshow_debug_message(_exception.script);\nshow_debug_message(_exception.stacktrace);\n}","Explaining Third Code Example (if Any)":"an example accessing the struct using the catch statement"}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"finally","Definition":"can be used in your game for error checking and permit you to test out blocks of code and control what happens if any runtime exceptions occur.","First Code Example":"finally\n{\n<statement1>;\n<statement2>;\netc...\n}","Explaining First Code Example":"note that within the finally block you cannot use break, continue, exit or return statements as they have no meaning in this context and the compiler will generate an error if they are used.","Second Code Example (if Any)":"var a = 0, b = 0, c = 0;\ntry\n{\ntry\n{\nc = a div b;\n}\nfinally\n{\n++a;\n}\n}\ncatch(_exception)\n{\n++a;\nshow_debug_message(_exception.message);\nshow_debug_message(_exception.longmessage);\nshow_debug_message(_exception.script);\nshow_debug_message(_exception.stacktrace);\n}\nfinally\n{\nshow_debug_message(\"a = \" + string(a));\n}","Explaining Second Code Example (if Any)":"showing how to nest various try / catch / finally within each other. you can take over the default gml error message and use your own handler code by calling the function exception_unhandled_handler(). this runtime function permits you to supply a custom method to use that will be called whenever any unhandled exceptions occur in your game."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"while","Definition":"a statement that is iterated over again and again based on the results of the evaluation of an expression. if the initial evaluation is false, the statements may not even be run.","First Code Example":"while (<expression>)\n{\n<statement>;\n<statement>;\n...\n}","Explaining First Code Example":"as long as the expression evaluates to true, the statement (which can also be a code block of multiple statements with curly brackets {}) is executed.","Second Code Example (if Any)":"while (place_meeting(x, y, obj_wall))\n{\nx -= 1;\n}","Explaining Second Code Example (if Any)":"the example code is checking for a collision between the calling instance and a \"wall\" instance, and it will perform multiple iterations while one is occurring - moving the instance left by one pixel - until the instance is no longer in collision.","Third Code Example (if Any)":"var _check = 0;\nwhile ((!place_free(x, y)) && (_check < 100))\n{\nx = random(room_width);\ny = random(room_height);\n_check += 1;\n}\nif (_check >= 100)\n{\n// code failed, so deal with it\n}","Explaining Third Code Example (if Any)":"using an additional variable check in the expression to prevent an infinite loop.","Fourth Code Example (if Any)":"var i = 0;\nwhile (true)\n{\nx[i] = random(room_width);\ny[i] = random(room_height);\nif ((i++) >= 100)\n{\nbreak;\n}\n}","Explaining Fourth Code Example (if Any)":"using the break statement to break out of the loop","Fifth Code Example (if Any)":"var file = file_text_open_read(\"game_data.txt\");\nvar _num = 0;\nwhile (!file_text_eof(file))\n{\nvar _s = file_text_readln(file);\nif (_s == \"\")\n{\ncontinue;\n}\nstr[num++] = _s;\n}\nfile_text_close(file);","Explaining Fifth Code Example (if Any)":"you can use the continue statement in a while loop. using this will end the current loop iteration and restart the loop again on a new iteration as shown in the code example. that code will open a file and read a line from it each loop iteration until the end of the file contents are reached. if the line being read is an empty string, the current loop iteration is ended using the continue statement and a new iteration will be started, otherwise the string is added into an array and the array position incremented."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"with","Definition":"the statement will then be executed for each of the indicated instances or structs, as if it is the current (i.e. self). the with statement essentially performs a loop.","First Code Example":"with (<expression>)\n{\n<statement>;\n<statement>;\n...\n}","Explaining First Code Example":"the expression can take a number of different inputs:\none or more instances to perform the code on: a single object instance, an object asset (which indicates that all instances of this object in the room are to run the code block).\none or more structs, or the keyword global to access the the global struct.\none of the special keywords (self, other, all or noone).\nthis will then change the scope of the code within the curly brackets { } from the instance, struct or function that executes the with to the instance (or instances or struct) given in the expression.\ndepending on the result of the expression, the statements inside the curly brackets { } will either be not executed at all, executed a single time or multiple times:\nwhen with receives noone, it executes 0 times, i.e. it runs the code for \"no one\".\nwhen it receives an object instance, a struct or one of the keywords self, other or global, it runs the code once, for the instance or struct being referenced.\nwhen it receives an object asset or the keyword all, it runs the code multiple times: every iteration of the loop will run on one instance of the object or on all instances, respectively.","Second Code Example (if Any)":"with (obj_ball)\n{\ny += 8;\n}","Explaining Second Code Example (if Any)":"the example moves all instances of the ball object 8 pixels down","Third Code Example (if Any)":"with (obj_ball)\n{\nx = random(room_width);\ny = random(room_height);\nspeed = 1 + random(2);\ndirection = random(360);\n}","Explaining Third Code Example (if Any)":"this example moves all the balls to a random position and give them a random speed and direction. note, take caution when referencing other instances, including any code run inside with() blocks.","Fourth Code Example (if Any)":"var _count = 0;\nwith (obj_enemy)\n{\nif (++_count > 10)\n{\nbreak;\n}\nhp = 100;\n}","Explaining Fourth Code Example (if Any)":"using break will immediately exit the with code block and move on to any code that is in the event or function after the with should have finished. the above code loops through the instances in the room of an object obj_enemy and sets the variable hp to 100 for the first 10 it finds. if any more than 10 instances exist, the with code will call break and end.","Fifth Code Example (if Any)":"with (obj_enemy_parent)\n{\nif (invulnerable == true)\n{\ncontinue;\n}\nhp -= 25;\n}","Explaining Fifth Code Example (if Any)":"this code will loop through all instances with the parent obj_enemy_parent, then checks each instance to see if the invulnerable instance variable is true or not. if it is, the continue keyword ends the current iteration of the loop and moves on to the next available instance, otherwise it removes 25 from the hp variable. this will repeat until all instances with that parent have been checked."}}
{"id":"Language_Features","sheet":"Language Features","text":{"Term":"the \"other\" instance or struct","Definition":"when using the with statement, within the statement(s), the indicated instance or struct has become the target (self) instance that runs the code block, which means that the original instance (that contains the with and the entire code block) has become the other instance.","First Code Example":"with (obj_ball)\n{\nx = other.x;\ny = other.y;\n}\n// executing code in a new instance\nwith (instance_create_layer(x, y, \"instances\", obj_ball))\n{\nspeed = other.speed;\ndirection = other.direction;\n}","Explaining First Code Example":"the code moves all balls to the position of the current instance that actually contains the code. then the code will create an instance of obj_ball and assign it the speed and direction of the instance that runs the whole code block.\ntip if you simply need to assign values to the new instance's variables, you can pass them through thevar_struct parameter of instance_create_layer / instance_create_depth.","Second Code Example (if Any)":"with (instance_nearest(x, y, obj_ball))\n{\ninstance_destroy();\n}","Explaining Second Code Example (if Any)":"when instance functions returns either an object instance or noone. the code will destroy the instance of obj_ball nearest to the instance running the code. when no instance is found, the function returns noone so that the code inside the with isn't executed.","Third Code Example (if Any)":"with(clone_struct)\n{\nxx = other.x;\nyy = other.y;\nspd = other.speed;\ndir = other.direction;\n}","Explaining Third Code Example (if Any)":"the code uses with to target a struct and set the given struct member variables to the values stored in the instance variables from the instance calling the code.","Fourth Code Example (if Any)":"var _inst = noone;\nwith (obj_ball)\n{\nif (str > other.str)\n{\n_inst = id;\n}\n}\nif (_inst != noone)\n{\ntarget = _inst;\n}","Explaining Fourth Code Example (if Any)":"the above code is slightly more complex than previous ones due to it using a local variable. this variable is local to either the event or the script function and not to the instance or struct and so can be used and accessed by all instances that are referenced within the code block. so, in the code above we have set a local variable to the special keyword noone and then use the with construction to have every instance of obj_ball check their str variable against that of the instance running the code block. if the value of the variable is larger, then they store their unique id in the inst local variable, meaning that at the end of the code, only the instance with a value greater than the calling instance (or the keyword noone if none are larger) will be stored in the local variable _inst."}}
